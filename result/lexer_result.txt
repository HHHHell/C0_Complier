1 CONSTSY const
2 INTSY int
3 IDENTITY max
4 ASSIGN =
5 CONST_INT 10
6 SEMICOLON ;
7 CONSTSY const
8 CHARSY char
9 IDENTITY a
10 ASSIGN =
11 CONST_CHAR a
12 SEMICOLON ;
13 CONSTSY const
14 CHARSY char
15 IDENTITY plus
16 ASSIGN =
17 CONST_CHAR +
18 COMMA ,
19 IDENTITY minus
20 ASSIGN =
21 CONST_CHAR -
22 COMMA ,
23 IDENTITY mult
24 ASSIGN =
25 CONST_CHAR *
26 COMMA ,
27 IDENTITY div
28 ASSIGN =
29 CONST_CHAR /
30 SEMICOLON ;
31 INTSY int
32 IDENTITY n
33 COMMA ,
34 IDENTITY x
35 COMMA ,
36 IDENTITY y
37 COMMA ,
38 IDENTITY kind
39 COMMA ,
40 IDENTITY m
41 COMMA ,
42 IDENTITY ans
43 COMMA ,
44 IDENTITY _a
45 COMMA ,
46 IDENTITY _b
47 SEMICOLON ;
48 CHARSY char
49 IDENTITY ch
50 COMMA ,
51 IDENTITY alphabet
52 L_SQUARE [
53 CONST_INT 26
54 R_SQUARE ]
55 SEMICOLON ;
56 VOIDSY void
57 IDENTITY testdefine
58 L_CURLY {
59 CONSTSY const
60 INTSY int
61 IDENTITY int0
62 ASSIGN =
63 CONST_INT 0
64 COMMA ,
65 IDENTITY int1
66 ASSIGN =
67 CONST_INT 1
68 COMMA ,
69 IDENTITY int2
70 ASSIGN =
71 CONST_INT 2
72 COMMA ,
73 IDENTITY int3
74 ASSIGN =
75 CONST_INT 3
76 COMMA ,
77 IDENTITY int4
78 ASSIGN =
79 CONST_INT 4
80 COMMA ,
81 IDENTITY int5
82 ASSIGN =
83 CONST_INT 5
84 COMMA ,
85 IDENTITY int6
86 ASSIGN =
87 CONST_INT 6
88 COMMA ,
89 IDENTITY int7
90 ASSIGN =
91 CONST_INT 7
92 COMMA ,
93 IDENTITY int8
94 ASSIGN =
95 CONST_INT 8
96 COMMA ,
97 IDENTITY int9
98 ASSIGN =
99 CONST_INT 9
100 COMMA ,
101 IDENTITY int10
102 ASSIGN =
103 CONST_INT 10
104 COMMA ,
105 IDENTITY int11
106 ASSIGN =
107 CONST_INT 11
108 COMMA ,
109 IDENTITY int12
110 ASSIGN =
111 CONST_INT 12
112 COMMA ,
113 IDENTITY int13
114 ASSIGN =
115 CONST_INT 13
116 COMMA ,
117 IDENTITY int14
118 ASSIGN =
119 CONST_INT 14
120 COMMA ,
121 IDENTITY int15
122 ASSIGN =
123 CONST_INT 15
124 COMMA ,
125 IDENTITY int16
126 ASSIGN =
127 CONST_INT 16
128 COMMA ,
129 IDENTITY int17
130 ASSIGN =
131 CONST_INT 17
132 COMMA ,
133 IDENTITY int18
134 ASSIGN =
135 CONST_INT 18
136 COMMA ,
137 IDENTITY int19
138 ASSIGN =
139 CONST_INT 19
140 SEMICOLON ;
141 CONSTSY const
142 INTSY int
143 IDENTITY int_0
144 ASSIGN =
145 CONST_INT 0
146 COMMA ,
147 IDENTITY int_1
148 ASSIGN =
149 MINUS -
150 CONST_INT 1
151 COMMA ,
152 IDENTITY int_2
153 ASSIGN =
154 MINUS -
155 CONST_INT 2
156 COMMA ,
157 IDENTITY int_3
158 ASSIGN =
159 MINUS -
160 CONST_INT 3
161 COMMA ,
162 IDENTITY int_4
163 ASSIGN =
164 MINUS -
165 CONST_INT 4
166 COMMA ,
167 IDENTITY int_5
168 ASSIGN =
169 MINUS -
170 CONST_INT 5
171 COMMA ,
172 IDENTITY int_6
173 ASSIGN =
174 MINUS -
175 CONST_INT 6
176 COMMA ,
177 IDENTITY int_7
178 ASSIGN =
179 MINUS -
180 CONST_INT 7
181 COMMA ,
182 IDENTITY int_8
183 ASSIGN =
184 MINUS -
185 CONST_INT 8
186 COMMA ,
187 IDENTITY int_9
188 ASSIGN =
189 MINUS -
190 CONST_INT 9
191 COMMA ,
192 IDENTITY int_10
193 ASSIGN =
194 MINUS -
195 CONST_INT 10
196 COMMA ,
197 IDENTITY int_11
198 ASSIGN =
199 MINUS -
200 CONST_INT 11
201 COMMA ,
202 IDENTITY int_12
203 ASSIGN =
204 MINUS -
205 CONST_INT 12
206 COMMA ,
207 IDENTITY int_13
208 ASSIGN =
209 MINUS -
210 CONST_INT 13
211 COMMA ,
212 IDENTITY int_14
213 ASSIGN =
214 MINUS -
215 CONST_INT 14
216 COMMA ,
217 IDENTITY int_15
218 ASSIGN =
219 MINUS -
220 CONST_INT 15
221 COMMA ,
222 IDENTITY int_16
223 ASSIGN =
224 MINUS -
225 CONST_INT 16
226 COMMA ,
227 IDENTITY int_17
228 ASSIGN =
229 MINUS -
230 CONST_INT 17
231 COMMA ,
232 IDENTITY int_18
233 ASSIGN =
234 MINUS -
235 CONST_INT 18
236 COMMA ,
237 IDENTITY int_19
238 ASSIGN =
239 MINUS -
240 CONST_INT 19
241 SEMICOLON ;
242 CONSTSY const
243 INTSY int
244 IDENTITY _int0
245 ASSIGN =
246 CONST_INT 0
247 COMMA ,
248 IDENTITY _int1
249 ASSIGN =
250 PLUS +
251 CONST_INT 1
252 COMMA ,
253 IDENTITY _int2
254 ASSIGN =
255 PLUS +
256 CONST_INT 2
257 COMMA ,
258 IDENTITY _int3
259 ASSIGN =
260 PLUS +
261 CONST_INT 3
262 COMMA ,
263 IDENTITY _int4
264 ASSIGN =
265 PLUS +
266 CONST_INT 4
267 COMMA ,
268 IDENTITY _int5
269 ASSIGN =
270 PLUS +
271 CONST_INT 5
272 COMMA ,
273 IDENTITY _int6
274 ASSIGN =
275 PLUS +
276 CONST_INT 6
277 COMMA ,
278 IDENTITY _int7
279 ASSIGN =
280 PLUS +
281 CONST_INT 7
282 COMMA ,
283 IDENTITY _int8
284 ASSIGN =
285 PLUS +
286 CONST_INT 8
287 COMMA ,
288 IDENTITY _int9
289 ASSIGN =
290 PLUS +
291 CONST_INT 9
292 COMMA ,
293 IDENTITY _int10
294 ASSIGN =
295 PLUS +
296 CONST_INT 10
297 COMMA ,
298 IDENTITY _int11
299 ASSIGN =
300 PLUS +
301 CONST_INT 11
302 COMMA ,
303 IDENTITY _int12
304 ASSIGN =
305 PLUS +
306 CONST_INT 12
307 COMMA ,
308 IDENTITY _int13
309 ASSIGN =
310 PLUS +
311 CONST_INT 13
312 COMMA ,
313 IDENTITY _int14
314 ASSIGN =
315 PLUS +
316 CONST_INT 14
317 COMMA ,
318 IDENTITY _int15
319 ASSIGN =
320 PLUS +
321 CONST_INT 15
322 COMMA ,
323 IDENTITY _int16
324 ASSIGN =
325 PLUS +
326 CONST_INT 16
327 COMMA ,
328 IDENTITY _int17
329 ASSIGN =
330 PLUS +
331 CONST_INT 17
332 COMMA ,
333 IDENTITY _int18
334 ASSIGN =
335 PLUS +
336 CONST_INT 18
337 COMMA ,
338 IDENTITY _int19
339 ASSIGN =
340 PLUS +
341 CONST_INT 19
342 SEMICOLON ;
343 CONSTSY const
344 CHARSY char
345 IDENTITY char0
346 ASSIGN =
347 CONST_CHAR 0
348 COMMA ,
349 IDENTITY char1
350 ASSIGN =
351 CONST_CHAR 1
352 COMMA ,
353 IDENTITY char2
354 ASSIGN =
355 CONST_CHAR 2
356 COMMA ,
357 IDENTITY char3
358 ASSIGN =
359 CONST_CHAR 3
360 COMMA ,
361 IDENTITY char4
362 ASSIGN =
363 CONST_CHAR 4
364 COMMA ,
365 IDENTITY char5
366 ASSIGN =
367 CONST_CHAR 5
368 COMMA ,
369 IDENTITY char6
370 ASSIGN =
371 CONST_CHAR 6
372 COMMA ,
373 IDENTITY char7
374 ASSIGN =
375 CONST_CHAR 7
376 COMMA ,
377 IDENTITY char8
378 ASSIGN =
379 CONST_CHAR 8
380 COMMA ,
381 IDENTITY char9
382 ASSIGN =
383 CONST_CHAR 9
384 SEMICOLON ;
385 INTSY int
386 IDENTITY var0
387 COMMA ,
388 IDENTITY var1
389 COMMA ,
390 IDENTITY arr1
391 L_SQUARE [
392 CONST_INT 1
393 R_SQUARE ]
394 COMMA ,
395 IDENTITY var2
396 COMMA ,
397 IDENTITY arr2
398 L_SQUARE [
399 CONST_INT 2
400 R_SQUARE ]
401 COMMA ,
402 IDENTITY var3
403 COMMA ,
404 IDENTITY arr3
405 L_SQUARE [
406 CONST_INT 3
407 R_SQUARE ]
408 COMMA ,
409 IDENTITY var4
410 COMMA ,
411 IDENTITY arr4
412 L_SQUARE [
413 CONST_INT 4
414 R_SQUARE ]
415 COMMA ,
416 IDENTITY var5
417 COMMA ,
418 IDENTITY arr5
419 L_SQUARE [
420 CONST_INT 5
421 R_SQUARE ]
422 COMMA ,
423 IDENTITY var6
424 COMMA ,
425 IDENTITY arr6
426 L_SQUARE [
427 CONST_INT 6
428 R_SQUARE ]
429 COMMA ,
430 IDENTITY var7
431 COMMA ,
432 IDENTITY arr7
433 L_SQUARE [
434 CONST_INT 7
435 R_SQUARE ]
436 COMMA ,
437 IDENTITY var8
438 COMMA ,
439 IDENTITY arr8
440 L_SQUARE [
441 CONST_INT 8
442 R_SQUARE ]
443 COMMA ,
444 IDENTITY var9
445 COMMA ,
446 IDENTITY arr9
447 L_SQUARE [
448 CONST_INT 9
449 R_SQUARE ]
450 COMMA ,
451 IDENTITY var10
452 COMMA ,
453 IDENTITY arr10
454 L_SQUARE [
455 CONST_INT 10
456 R_SQUARE ]
457 COMMA ,
458 IDENTITY var11
459 COMMA ,
460 IDENTITY arr11
461 L_SQUARE [
462 CONST_INT 11
463 R_SQUARE ]
464 COMMA ,
465 IDENTITY var12
466 COMMA ,
467 IDENTITY arr12
468 L_SQUARE [
469 CONST_INT 12
470 R_SQUARE ]
471 COMMA ,
472 IDENTITY var13
473 COMMA ,
474 IDENTITY arr13
475 L_SQUARE [
476 CONST_INT 13
477 R_SQUARE ]
478 COMMA ,
479 IDENTITY var14
480 COMMA ,
481 IDENTITY arr14
482 L_SQUARE [
483 CONST_INT 14
484 R_SQUARE ]
485 COMMA ,
486 IDENTITY var15
487 COMMA ,
488 IDENTITY arr15
489 L_SQUARE [
490 CONST_INT 15
491 R_SQUARE ]
492 COMMA ,
493 IDENTITY var16
494 COMMA ,
495 IDENTITY arr16
496 L_SQUARE [
497 CONST_INT 16
498 R_SQUARE ]
499 COMMA ,
500 IDENTITY var17
501 COMMA ,
502 IDENTITY arr17
503 L_SQUARE [
504 CONST_INT 17
505 R_SQUARE ]
506 COMMA ,
507 IDENTITY var18
508 COMMA ,
509 IDENTITY arr18
510 L_SQUARE [
511 CONST_INT 18
512 R_SQUARE ]
513 COMMA ,
514 IDENTITY var19
515 COMMA ,
516 IDENTITY arr19
517 L_SQUARE [
518 CONST_INT 19
519 R_SQUARE ]
520 SEMICOLON ;
521 R_CURLY }
522 INTSY int
523 IDENTITY fibo
524 L_BRACK (
525 INTSY int
526 IDENTITY n
527 R_BRACK )
528 L_CURLY {
529 IFSY if
530 L_BRACK (
531 IDENTITY n
532 SMALLER <
533 CONST_INT 0
534 R_BRACK )
535 RETURNSY return
536 L_BRACK (
537 MINUS -
538 CONST_INT 1
539 R_BRACK )
540 SEMICOLON ;
541 ELSESY else
542 IFSY if
543 L_BRACK (
544 IDENTITY n
545 EQUAL ==
546 CONST_INT 0
547 R_BRACK )
548 RETURNSY return
549 L_BRACK (
550 CONST_INT 0
551 R_BRACK )
552 SEMICOLON ;
553 ELSESY else
554 IFSY if
555 L_BRACK (
556 IDENTITY n
557 EQUAL ==
558 CONST_INT 1
559 R_BRACK )
560 RETURNSY return
561 L_BRACK (
562 CONST_INT 1
563 R_BRACK )
564 SEMICOLON ;
565 ELSESY else
566 IFSY if
567 L_BRACK (
568 IDENTITY n
569 GREATER >
570 IDENTITY max
571 R_BRACK )
572 RETURNSY return
573 L_BRACK (
574 MINUS -
575 CONST_INT 2
576 R_BRACK )
577 SEMICOLON ;
578 ELSESY else
579 RETURNSY return
580 L_BRACK (
581 IDENTITY fibo
582 L_BRACK (
583 IDENTITY n
584 MINUS -
585 CONST_INT 1
586 R_BRACK )
587 PLUS +
588 IDENTITY fibo
589 L_BRACK (
590 IDENTITY n
591 MINUS -
592 CONST_INT 2
593 R_BRACK )
594 R_BRACK )
595 SEMICOLON ;
596 R_CURLY }
597 CHARSY char
598 IDENTITY upcase
599 L_BRACK (
600 CHARSY char
601 IDENTITY x
602 R_BRACK )
603 L_CURLY {
604 CHARSY char
605 IDENTITY y
606 SEMICOLON ;
607 IFSY if
608 L_BRACK (
609 IDENTITY x
610 NOLESS >=
611 CONST_CHAR a
612 R_BRACK )
613 IFSY if
614 L_BRACK (
615 IDENTITY x
616 NOBIGGER <=
617 CONST_CHAR z
618 R_BRACK )
619 L_CURLY {
620 IDENTITY y
621 ASSIGN =
622 IDENTITY x
623 MINUS -
624 CONST_CHAR a
625 PLUS +
626 CONST_CHAR A
627 SEMICOLON ;
628 RETURNSY return
629 L_BRACK (
630 IDENTITY y
631 R_BRACK )
632 SEMICOLON ;
633 R_CURLY }
634 ELSESY else
635 RETURNSY return
636 L_BRACK (
637 IDENTITY x
638 R_BRACK )
639 SEMICOLON ;
640 ELSESY else
641 RETURNSY return
642 L_BRACK (
643 IDENTITY x
644 R_BRACK )
645 SEMICOLON ;
646 R_CURLY }
647 CHARSY char
648 IDENTITY lowcase
649 L_BRACK (
650 CHARSY char
651 IDENTITY x
652 R_BRACK )
653 L_CURLY {
654 CHARSY char
655 IDENTITY y
656 SEMICOLON ;
657 IFSY if
658 L_BRACK (
659 IDENTITY x
660 NOLESS >=
661 CONST_CHAR A
662 R_BRACK )
663 IFSY if
664 L_BRACK (
665 IDENTITY x
666 NOBIGGER <=
667 CONST_CHAR Z
668 R_BRACK )
669 L_CURLY {
670 IDENTITY y
671 ASSIGN =
672 IDENTITY x
673 MINUS -
674 CONST_CHAR A
675 PLUS +
676 CONST_CHAR a
677 SEMICOLON ;
678 RETURNSY return
679 L_BRACK (
680 IDENTITY y
681 R_BRACK )
682 SEMICOLON ;
683 R_CURLY }
684 ELSESY else
685 RETURNSY return
686 L_BRACK (
687 IDENTITY x
688 R_BRACK )
689 SEMICOLON ;
690 ELSESY else
691 RETURNSY return
692 L_BRACK (
693 IDENTITY x
694 R_BRACK )
695 SEMICOLON ;
696 R_CURLY }
697 VOIDSY void
698 IDENTITY printspace
699 L_CURLY {
700 PRINTFSY printf
701 L_BRACK (
702 CONST_STRING " "
703 R_BRACK )
704 SEMICOLON ;
705 R_CURLY }
706 INTSY int
707 IDENTITY operation
708 L_BRACK (
709 INTSY int
710 IDENTITY x
711 COMMA ,
712 INTSY int
713 IDENTITY y
714 COMMA ,
715 INTSY int
716 IDENTITY kind
717 R_BRACK )
718 L_CURLY {
719 SWITCHSY switch
720 L_BRACK (
721 IDENTITY kind
722 R_BRACK )
723 L_CURLY {
724 CASESY case
725 CONST_INT 1
726 COLON :
727 L_CURLY {
728 PRINTFSY printf
729 L_BRACK (
730 CONST_STRING "operation:"
731 COMMA ,
732 IDENTITY x
733 PLUS +
734 IDENTITY y
735 R_BRACK )
736 SEMICOLON ;
737 RETURNSY return
738 L_BRACK (
739 IDENTITY x
740 PLUS +
741 IDENTITY y
742 R_BRACK )
743 SEMICOLON ;
744 R_CURLY }
745 CASESY case
746 CONST_INT 2
747 COLON :
748 L_CURLY {
749 PRINTFSY printf
750 L_BRACK (
751 CONST_STRING "operation:"
752 COMMA ,
753 IDENTITY x
754 MINUS -
755 IDENTITY y
756 R_BRACK )
757 SEMICOLON ;
758 RETURNSY return
759 L_BRACK (
760 IDENTITY x
761 MINUS -
762 IDENTITY y
763 R_BRACK )
764 SEMICOLON ;
765 R_CURLY }
766 CASESY case
767 CONST_INT 3
768 COLON :
769 L_CURLY {
770 PRINTFSY printf
771 L_BRACK (
772 CONST_STRING "operation:"
773 COMMA ,
774 IDENTITY x
775 MULTI *
776 IDENTITY y
777 R_BRACK )
778 SEMICOLON ;
779 RETURNSY return
780 L_BRACK (
781 IDENTITY x
782 MULTI *
783 IDENTITY y
784 R_BRACK )
785 SEMICOLON ;
786 R_CURLY }
787 CASESY case
788 CONST_INT 4
789 COLON :
790 L_CURLY {
791 IFSY if
792 L_BRACK (
793 IDENTITY y
794 NOTEQUAL !=
795 CONST_INT 0
796 R_BRACK )
797 L_CURLY {
798 PRINTFSY printf
799 L_BRACK (
800 CONST_STRING "operation:"
801 COMMA ,
802 IDENTITY x
803 DIVIDE /
804 IDENTITY y
805 R_BRACK )
806 SEMICOLON ;
807 RETURNSY return
808 L_BRACK (
809 IDENTITY x
810 DIVIDE /
811 IDENTITY y
812 R_BRACK )
813 SEMICOLON ;
814 R_CURLY }
815 ELSESY else
816 L_CURLY {
817 PRINTFSY printf
818 L_BRACK (
819 CONST_STRING "cannot div 0!!!"
820 R_BRACK )
821 SEMICOLON ;
822 RETURNSY return
823 L_BRACK (
824 CONST_INT 0
825 R_BRACK )
826 SEMICOLON ;
827 R_CURLY }
828 R_CURLY }
829 DEFAULTSY default
830 COLON :
831 L_CURLY {
832 PRINTFSY printf
833 L_BRACK (
834 CONST_STRING "operation kind is not in [+-*/]!!!"
835 R_BRACK )
836 SEMICOLON ;
837 RETURNSY return
838 L_BRACK (
839 MINUS -
840 CONST_INT 1
841 R_BRACK )
842 SEMICOLON ;
843 R_CURLY }
844 R_CURLY }
845 R_CURLY }
846 VOIDSY void
847 IDENTITY display
848 L_BRACK (
849 INTSY int
850 IDENTITY m
851 R_BRACK )
852 L_CURLY {
853 INTSY int
854 IDENTITY i
855 SEMICOLON ;
856 CHARSY char
857 IDENTITY letter
858 SEMICOLON ;
859 IFSY if
860 L_BRACK (
861 IDENTITY m
862 NOBIGGER <=
863 CONST_INT 0
864 R_BRACK )
865 RETURNSY return
866 SEMICOLON ;
867 ELSESY else
868 IFSY if
869 L_BRACK (
870 IDENTITY m
871 GREATER >
872 CONST_INT 26
873 R_BRACK )
874 IDENTITY m
875 ASSIGN =
876 CONST_INT 26
877 SEMICOLON ;
878 ELSESY else
879 L_CURLY {
880 IDENTITY i
881 ASSIGN =
882 CONST_INT 0
883 SEMICOLON ;
884 IDENTITY letter
885 ASSIGN =
886 IDENTITY a
887 SEMICOLON ;
888 WHILESY while
889 L_BRACK (
890 IDENTITY i
891 SMALLER <
892 IDENTITY m
893 R_BRACK )
894 L_CURLY {
895 IDENTITY alphabet
896 L_SQUARE [
897 IDENTITY i
898 R_SQUARE ]
899 ASSIGN =
900 IDENTITY upcase
901 L_BRACK (
902 IDENTITY letter
903 R_BRACK )
904 SEMICOLON ;
905 IDENTITY alphabet
906 L_SQUARE [
907 IDENTITY i
908 R_SQUARE ]
909 ASSIGN =
910 IDENTITY upcase
911 L_BRACK (
912 IDENTITY letter
913 R_BRACK )
914 SEMICOLON ;
915 PRINTFSY printf
916 L_BRACK (
917 IDENTITY alphabet
918 L_SQUARE [
919 IDENTITY i
920 R_SQUARE ]
921 R_BRACK )
922 SEMICOLON ;
923 IDENTITY i
924 ASSIGN =
925 IDENTITY i
926 PLUS +
927 CONST_INT 1
928 SEMICOLON ;
929 IDENTITY letter
930 ASSIGN =
931 IDENTITY letter
932 PLUS +
933 CONST_INT 1
934 SEMICOLON ;
935 R_CURLY }
936 IDENTITY printspace
937 SEMICOLON ;
938 IDENTITY i
939 ASSIGN =
940 CONST_INT 0
941 SEMICOLON ;
942 WHILESY while
943 L_BRACK (
944 IDENTITY i
945 SMALLER <
946 IDENTITY m
947 R_BRACK )
948 L_CURLY {
949 IDENTITY alphabet
950 L_SQUARE [
951 IDENTITY i
952 R_SQUARE ]
953 ASSIGN =
954 IDENTITY lowcase
955 L_BRACK (
956 IDENTITY alphabet
957 L_SQUARE [
958 IDENTITY i
959 R_SQUARE ]
960 R_BRACK )
961 SEMICOLON ;
962 PRINTFSY printf
963 L_BRACK (
964 IDENTITY alphabet
965 L_SQUARE [
966 IDENTITY i
967 R_SQUARE ]
968 R_BRACK )
969 SEMICOLON ;
970 IDENTITY i
971 ASSIGN =
972 IDENTITY i
973 PLUS +
974 CONST_INT 1
975 SEMICOLON ;
976 R_CURLY }
977 IDENTITY printspace
978 SEMICOLON ;
979 R_CURLY }
980 R_CURLY }
981 VOIDSY void
982 IDENTITY expre
983 L_CURLY {
984 INTSY int
985 IDENTITY x
986 COMMA ,
987 IDENTITY y
988 COMMA ,
989 IDENTITY z
990 SEMICOLON ;
991 SCANFSY scanf
992 L_BRACK (
993 IDENTITY x
994 COMMA ,
995 IDENTITY y
996 R_BRACK )
997 SEMICOLON ;
998 IDENTITY z
999 ASSIGN =
1000 PLUS +
1001 L_BRACK (
1002 L_BRACK (
1003 IDENTITY x
1004 PLUS +
1005 IDENTITY y
1006 R_BRACK )
1007 MINUS -
1008 L_BRACK (
1009 MINUS -
1010 IDENTITY y
1011 MULTI *
1012 L_BRACK (
1013 MINUS -
1014 CONST_INT 2
1015 R_BRACK )
1016 R_BRACK )
1017 PLUS +
1018 L_BRACK (
1019 MINUS -
1020 CONST_INT 2
1021 MULTI *
1022 CONST_INT 0
1023 R_BRACK )
1024 R_BRACK )
1025 SEMICOLON ;
1026 PRINTFSY printf
1027 L_BRACK (
1028 CONST_STRING "expre:"
1029 COMMA ,
1030 IDENTITY z
1031 R_BRACK )
1032 SEMICOLON ;
1033 IDENTITY printspace
1034 SEMICOLON ;
1035 R_CURLY }
1036 INTSY int
1037 IDENTITY mod
1038 L_BRACK (
1039 INTSY int
1040 IDENTITY x
1041 COMMA ,
1042 INTSY int
1043 IDENTITY y
1044 R_BRACK )
1045 L_CURLY {
1046 INTSY int
1047 IDENTITY z
1048 SEMICOLON ;
1049 IDENTITY z
1050 ASSIGN =
1051 IDENTITY x
1052 MINUS -
1053 IDENTITY x
1054 DIVIDE /
1055 IDENTITY y
1056 MULTI *
1057 IDENTITY y
1058 SEMICOLON ;
1059 RETURNSY return
1060 L_BRACK (
1061 IDENTITY z
1062 R_BRACK )
1063 SEMICOLON ;
1064 R_CURLY }
1065 INTSY int
1066 IDENTITY gcd
1067 L_BRACK (
1068 INTSY int
1069 IDENTITY a
1070 COMMA ,
1071 INTSY int
1072 IDENTITY b
1073 R_BRACK )
1074 L_CURLY {
1075 IFSY if
1076 L_BRACK (
1077 IDENTITY b
1078 EQUAL ==
1079 CONST_INT 0
1080 R_BRACK )
1081 RETURNSY return
1082 L_BRACK (
1083 CONST_INT 0
1084 R_BRACK )
1085 SEMICOLON ;
1086 ELSESY else
1087 IFSY if
1088 L_BRACK (
1089 IDENTITY mod
1090 L_BRACK (
1091 IDENTITY a
1092 COMMA ,
1093 IDENTITY b
1094 R_BRACK )
1095 EQUAL ==
1096 CONST_INT 0
1097 R_BRACK )
1098 RETURNSY return
1099 L_BRACK (
1100 IDENTITY b
1101 R_BRACK )
1102 SEMICOLON ;
1103 ELSESY else
1104 RETURNSY return
1105 L_BRACK (
1106 IDENTITY gcd
1107 L_BRACK (
1108 IDENTITY b
1109 COMMA ,
1110 IDENTITY mod
1111 L_BRACK (
1112 IDENTITY a
1113 COMMA ,
1114 IDENTITY b
1115 R_BRACK )
1116 R_BRACK )
1117 R_BRACK )
1118 SEMICOLON ;
1119 R_CURLY }
1120 VOIDSY void
1121 IDENTITY optimize
1122 L_CURLY {
1123 INTSY int
1124 IDENTITY i
1125 COMMA ,
1126 IDENTITY a
1127 COMMA ,
1128 IDENTITY b
1129 COMMA ,
1130 IDENTITY c
1131 COMMA ,
1132 IDENTITY t1
1133 COMMA ,
1134 IDENTITY t2
1135 COMMA ,
1136 IDENTITY t3
1137 COMMA ,
1138 IDENTITY t4
1139 SEMICOLON ;
1140 IDENTITY i
1141 ASSIGN =
1142 CONST_INT 0
1143 SEMICOLON ;
1144 IDENTITY c
1145 ASSIGN =
1146 CONST_INT 1
1147 SEMICOLON ;
1148 IDENTITY b
1149 ASSIGN =
1150 CONST_INT 1
1151 SEMICOLON ;
1152 WHILESY while
1153 L_BRACK (
1154 IDENTITY i
1155 SMALLER <
1156 CONST_INT 10000
1157 R_BRACK )
1158 L_CURLY {
1159 IDENTITY i
1160 ASSIGN =
1161 IDENTITY i
1162 PLUS +
1163 CONST_INT 1
1164 SEMICOLON ;
1165 IDENTITY t1
1166 ASSIGN =
1167 MINUS -
1168 IDENTITY c
1169 SEMICOLON ;
1170 IDENTITY t2
1171 ASSIGN =
1172 IDENTITY b
1173 MULTI *
1174 IDENTITY t1
1175 SEMICOLON ;
1176 IDENTITY t3
1177 ASSIGN =
1178 MINUS -
1179 IDENTITY c
1180 SEMICOLON ;
1181 IDENTITY c
1182 ASSIGN =
1183 IDENTITY b
1184 MULTI *
1185 IDENTITY t3
1186 SEMICOLON ;
1187 IDENTITY t4
1188 ASSIGN =
1189 IDENTITY t2
1190 PLUS +
1191 IDENTITY c
1192 SEMICOLON ;
1193 IDENTITY a
1194 ASSIGN =
1195 IDENTITY t4
1196 SEMICOLON ;
1197 R_CURLY }
1198 PRINTFSY printf
1199 L_BRACK (
1200 IDENTITY a
1201 R_BRACK )
1202 SEMICOLON ;
1203 IDENTITY printspace
1204 SEMICOLON ;
1205 PRINTFSY printf
1206 L_BRACK (
1207 IDENTITY b
1208 R_BRACK )
1209 SEMICOLON ;
1210 IDENTITY printspace
1211 SEMICOLON ;
1212 PRINTFSY printf
1213 L_BRACK (
1214 IDENTITY c
1215 R_BRACK )
1216 SEMICOLON ;
1217 IDENTITY printspace
1218 SEMICOLON ;
1219 PRINTFSY printf
1220 L_BRACK (
1221 IDENTITY t1
1222 R_BRACK )
1223 SEMICOLON ;
1224 IDENTITY printspace
1225 SEMICOLON ;
1226 PRINTFSY printf
1227 L_BRACK (
1228 IDENTITY t2
1229 R_BRACK )
1230 SEMICOLON ;
1231 IDENTITY printspace
1232 SEMICOLON ;
1233 PRINTFSY printf
1234 L_BRACK (
1235 IDENTITY t3
1236 R_BRACK )
1237 SEMICOLON ;
1238 IDENTITY printspace
1239 SEMICOLON ;
1240 PRINTFSY printf
1241 L_BRACK (
1242 IDENTITY t4
1243 R_BRACK )
1244 SEMICOLON ;
1245 R_CURLY }
1246 VOIDSY void
1247 IDENTITY process
1248 L_CURLY {
1249 INTSY int
1250 IDENTITY choice
1251 SEMICOLON ;
1252 CHARSY char
1253 IDENTITY choice_ch
1254 SEMICOLON ;
1255 SCANFSY scanf
1256 L_BRACK (
1257 IDENTITY choice
1258 R_BRACK )
1259 SEMICOLON ;
1260 IDENTITY choice_ch
1261 ASSIGN =
1262 IDENTITY choice
1263 PLUS +
1264 CONST_CHAR a
1265 MINUS -
1266 CONST_INT 1
1267 SEMICOLON ;
1268 SWITCHSY switch
1269 L_BRACK (
1270 IDENTITY choice_ch
1271 R_BRACK )
1272 L_CURLY {
1273 CASESY case
1274 CONST_CHAR a
1275 COLON :
1276 IDENTITY expre
1277 SEMICOLON ;
1278 CASESY case
1279 CONST_CHAR b
1280 COLON :
1281 L_CURLY {
1282 SCANFSY scanf
1283 L_BRACK (
1284 IDENTITY n
1285 R_BRACK )
1286 SEMICOLON ;
1287 IDENTITY ans
1288 ASSIGN =
1289 IDENTITY fibo
1290 L_BRACK (
1291 IDENTITY n
1292 R_BRACK )
1293 SEMICOLON ;
1294 PRINTFSY printf
1295 L_BRACK (
1296 CONST_STRING "fibo:"
1297 COMMA ,
1298 IDENTITY ans
1299 R_BRACK )
1300 SEMICOLON ;
1301 IDENTITY printspace
1302 SEMICOLON ;
1303 R_CURLY }
1304 CASESY case
1305 CONST_CHAR c
1306 COLON :
1307 L_CURLY {
1308 SCANFSY scanf
1309 L_BRACK (
1310 IDENTITY x
1311 COMMA ,
1312 IDENTITY y
1313 COMMA ,
1314 IDENTITY kind
1315 R_BRACK )
1316 SEMICOLON ;
1317 IDENTITY ans
1318 ASSIGN =
1319 IDENTITY operation
1320 L_BRACK (
1321 IDENTITY x
1322 COMMA ,
1323 IDENTITY y
1324 COMMA ,
1325 IDENTITY kind
1326 R_BRACK )
1327 SEMICOLON ;
1328 IDENTITY printspace
1329 SEMICOLON ;
1330 R_CURLY }
1331 CASESY case
1332 CONST_CHAR d
1333 COLON :
1334 L_CURLY {
1335 SCANFSY scanf
1336 L_BRACK (
1337 IDENTITY m
1338 R_BRACK )
1339 SEMICOLON ;
1340 IDENTITY display
1341 L_BRACK (
1342 IDENTITY m
1343 R_BRACK )
1344 SEMICOLON ;
1345 R_CURLY }
1346 CASESY case
1347 CONST_CHAR e
1348 COLON :
1349 L_CURLY {
1350 SCANFSY scanf
1351 L_BRACK (
1352 IDENTITY _a
1353 COMMA ,
1354 IDENTITY _b
1355 R_BRACK )
1356 SEMICOLON ;
1357 PRINTFSY printf
1358 L_BRACK (
1359 CONST_STRING "gcd:"
1360 COMMA ,
1361 IDENTITY gcd
1362 L_BRACK (
1363 IDENTITY _a
1364 COMMA ,
1365 IDENTITY _b
1366 R_BRACK )
1367 R_BRACK )
1368 SEMICOLON ;
1369 IDENTITY printspace
1370 SEMICOLON ;
1371 R_CURLY }
1372 CASESY case
1373 CONST_CHAR f
1374 COLON :
1375 PRINTFSY printf
1376 L_BRACK (
1377 CONST_STRING "string:!#$%&'()*+,-./:;<=>?@[\]^_`{|}~"
1378 R_BRACK )
1379 SEMICOLON ;
1380 DEFAULTSY default
1381 COLON :
1382 IDENTITY optimize
1383 SEMICOLON ;
1384 R_CURLY }
1385 R_CURLY }
1386 VOIDSY void
1387 IDENTITY main
1388 L_BRACK (
1389 R_BRACK )
1390 L_CURLY {
1391 INTSY int
1392 IDENTITY i
1393 COMMA ,
1394 IDENTITY num
1395 SEMICOLON ;
1396 IDENTITY i
1397 ASSIGN =
1398 CONST_INT 0
1399 SEMICOLON ;
1400 IDENTITY testdefine
1401 SEMICOLON ;
1402 SCANFSY scanf
1403 L_BRACK (
1404 IDENTITY num
1405 R_BRACK )
1406 SEMICOLON ;
1407 WHILESY while
1408 L_BRACK (
1409 IDENTITY i
1410 SMALLER <
1411 IDENTITY num
1412 R_BRACK )
1413 L_CURLY {
1414 IDENTITY i
1415 ASSIGN =
1416 IDENTITY i
1417 PLUS +
1418 CONST_INT 1
1419 SEMICOLON ;
1420 IDENTITY process
1421 SEMICOLON ;
1422 R_CURLY }
1423 RETURNSY return
1424 SEMICOLON ;
1425 R_CURLY }

Finished!
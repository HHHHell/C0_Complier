1 CONSTSY const
2 INTSY int
3 IDENTITY const_int_1
4 ASSIGN =
5 CONST_INT 100
6 COMMA ,
7 IDENTITY const_int_2
8 ASSIGN =
9 CONST_INT 200
10 SEMICOLON ;
11 CONSTSY const
12 INTSY int
13 IDENTITY const_int_3
14 ASSIGN =
15 CONST_INT 300
16 SEMICOLON ;
17 CONSTSY const
18 CHARSY char
19 IDENTITY const_char_a
20 ASSIGN =
21 CONST_CHAR a
22 COMMA ,
23 IDENTITY const_char_b
24 ASSIGN =
25 CONST_CHAR b
26 SEMICOLON ;
27 CONSTSY const
28 CHARSY char
29 IDENTITY const_char_c
30 ASSIGN =
31 CONST_CHAR c
32 SEMICOLON ;
33 INTSY int
34 IDENTITY out_1
35 COMMA ,
36 IDENTITY out_2
37 L_SQUARE [
38 CONST_INT 20
39 R_SQUARE ]
40 SEMICOLON ;
41 CHARSY char
42 IDENTITY out_a
43 COMMA ,
44 IDENTITY out_b
45 L_SQUARE [
46 CONST_INT 50
47 R_SQUARE ]
48 SEMICOLON ;
49 INTSY int
50 IDENTITY foo1
51 L_BRACK (
52 INTSY int
53 IDENTITY a
54 COMMA ,
55 INTSY int
56 IDENTITY b
57 R_BRACK )
58 L_CURLY {
59 IDENTITY a
60 ASSIGN =
61 CONST_INT 1
62 SEMICOLON ;
63 PRINTFSY printf
64 L_BRACK (
65 CONST_STRING "foo_1 "
66 R_BRACK )
67 SEMICOLON ;
68 RETURNSY return
69 L_BRACK (
70 IDENTITY a
71 R_BRACK )
72 SEMICOLON ;
73 R_CURLY }
74 INTSY int
75 IDENTITY foo2
76 L_CURLY {
77 PRINTFSY printf
78 L_BRACK (
79 CONST_STRING "foo_2 "
80 R_BRACK )
81 SEMICOLON ;
82 RETURNSY return
83 L_BRACK (
84 CONST_INT 2
85 R_BRACK )
86 SEMICOLON ;
87 R_CURLY }
88 CHARSY char
89 IDENTITY foo3
90 L_BRACK (
91 CHARSY char
92 IDENTITY a
93 R_BRACK )
94 L_CURLY {
95 PRINTFSY printf
96 L_BRACK (
97 CONST_STRING "foo_3 "
98 R_BRACK )
99 SEMICOLON ;
100 RETURNSY return
101 L_BRACK (
102 CONST_CHAR 3
103 R_BRACK )
104 SEMICOLON ;
105 R_CURLY }
106 CHARSY char
107 IDENTITY foo4
108 L_CURLY {
109 CHARSY char
110 IDENTITY a
111 SEMICOLON ;
112 IDENTITY a
113 ASSIGN =
114 CONST_CHAR 4
115 SEMICOLON ;
116 PRINTFSY printf
117 L_BRACK (
118 CONST_STRING "foo_4 "
119 R_BRACK )
120 SEMICOLON ;
121 RETURNSY return
122 L_BRACK (
123 IDENTITY a
124 R_BRACK )
125 SEMICOLON ;
126 R_CURLY }
127 VOIDSY void
128 IDENTITY foo5
129 L_CURLY {
130 PRINTFSY printf
131 L_BRACK (
132 CONST_STRING "foo_5 "
133 R_BRACK )
134 SEMICOLON ;
135 R_CURLY }
136 INTSY int
137 IDENTITY foo6
138 L_BRACK (
139 INTSY int
140 IDENTITY a
141 R_BRACK )
142 L_CURLY {
143 PRINTFSY printf
144 L_BRACK (
145 CONST_STRING "foo_6 "
146 R_BRACK )
147 SEMICOLON ;
148 IFSY if
149 L_BRACK (
150 IDENTITY a
151 EQUAL ==
152 CONST_INT 1
153 R_BRACK )
154 RETURNSY return
155 L_BRACK (
156 IDENTITY a
157 R_BRACK )
158 SEMICOLON ;
159 ELSESY else
160 RETURNSY return
161 L_BRACK (
162 IDENTITY a
163 MULTI *
164 IDENTITY foo6
165 L_BRACK (
166 IDENTITY a
167 MINUS -
168 CONST_INT 1
169 R_BRACK )
170 R_BRACK )
171 SEMICOLON ;
172 R_CURLY }
173 VOIDSY void
174 IDENTITY main
175 L_BRACK (
176 R_BRACK )
177 L_CURLY {
178 CONSTSY const
179 INTSY int
180 IDENTITY const_int_4
181 ASSIGN =
182 CONST_INT 400
183 COMMA ,
184 IDENTITY const_int_5
185 ASSIGN =
186 CONST_INT 500
187 SEMICOLON ;
188 CONSTSY const
189 CHARSY char
190 IDENTITY const_char_d
191 ASSIGN =
192 CONST_CHAR d
193 COMMA ,
194 IDENTITY const_char_e
195 ASSIGN =
196 CONST_CHAR e
197 SEMICOLON ;
198 INTSY int
199 IDENTITY in_1
200 COMMA ,
201 IDENTITY in_2
202 L_SQUARE [
203 CONST_INT 20
204 R_SQUARE ]
205 SEMICOLON ;
206 INTSY int
207 IDENTITY in_3
208 SEMICOLON ;
209 CHARSY char
210 IDENTITY in_a
211 COMMA ,
212 IDENTITY in_b
213 L_SQUARE [
214 CONST_INT 10
215 R_SQUARE ]
216 SEMICOLON ;
217 CHARSY char
218 IDENTITY in_c
219 SEMICOLON ;
220 INTSY int
221 IDENTITY switch_num
222 SEMICOLON ;
223 CHARSY char
224 IDENTITY swictch_chr
225 SEMICOLON ;
226 IDENTITY in_1
227 ASSIGN =
228 CONST_INT 2
229 SEMICOLON ;
230 IDENTITY in_2
231 L_SQUARE [
232 CONST_INT 1
233 R_SQUARE ]
234 ASSIGN =
235 CONST_INT 10
236 SEMICOLON ;
237 IDENTITY in_2
238 L_SQUARE [
239 CONST_INT 2
240 R_SQUARE ]
241 ASSIGN =
242 CONST_INT 20
243 SEMICOLON ;
244 IDENTITY in_1
245 ASSIGN =
246 L_BRACK (
247 IDENTITY in_2
248 L_SQUARE [
249 CONST_INT 1
250 R_SQUARE ]
251 PLUS +
252 CONST_INT 10
253 R_BRACK )
254 MULTI *
255 IDENTITY in_1
256 SEMICOLON ;
257 PRINTFSY printf
258 L_BRACK (
259 IDENTITY in_1
260 R_BRACK )
261 SEMICOLON ;
262 PRINTFSY printf
263 L_BRACK (
264 CONST_STRING " "
265 R_BRACK )
266 SEMICOLON ;
267 IDENTITY in_a
268 ASSIGN =
269 CONST_CHAR a
270 PLUS +
271 CONST_INT 10
272 SEMICOLON ;
273 PRINTFSY printf
274 L_BRACK (
275 IDENTITY in_a
276 R_BRACK )
277 SEMICOLON ;
278 PRINTFSY printf
279 L_BRACK (
280 CONST_STRING " "
281 R_BRACK )
282 SEMICOLON ;
283 IDENTITY in_1
284 ASSIGN =
285 CONST_INT 1
286 SEMICOLON ;
287 IDENTITY in_2
288 L_SQUARE [
289 CONST_INT 1
290 R_SQUARE ]
291 ASSIGN =
292 CONST_INT 2
293 SEMICOLON ;
294 IDENTITY in_c
295 ASSIGN =
296 IDENTITY in_a
297 MINUS -
298 L_BRACK (
299 CONST_CHAR a
300 MINUS -
301 CONST_CHAR A
302 R_BRACK )
303 PLUS +
304 L_BRACK (
305 CONST_INT 2
306 MULTI *
307 CONST_INT 3
308 MINUS -
309 IDENTITY in_1
310 PLUS +
311 IDENTITY in_2
312 L_SQUARE [
313 CONST_INT 1
314 R_SQUARE ]
315 R_BRACK )
316 SEMICOLON ;
317 PRINTFSY printf
318 L_BRACK (
319 IDENTITY in_c
320 R_BRACK )
321 SEMICOLON ;
322 PRINTFSY printf
323 L_BRACK (
324 CONST_STRING " "
325 R_BRACK )
326 SEMICOLON ;
327 IDENTITY in_2
328 L_SQUARE [
329 CONST_INT 1
330 R_SQUARE ]
331 ASSIGN =
332 CONST_INT 1
333 SEMICOLON ;
334 IFSY if
335 L_BRACK (
336 IDENTITY const_char_a
337 NOTEQUAL !=
338 CONST_CHAR b
339 R_BRACK )
340 PRINTFSY printf
341 L_BRACK (
342 CONST_STRING "true_1 "
343 R_BRACK )
344 SEMICOLON ;
345 ELSESY else
346 PRINTFSY printf
347 L_BRACK (
348 CONST_STRING "false_1 "
349 R_BRACK )
350 SEMICOLON ;
351 IFSY if
352 L_BRACK (
353 IDENTITY const_char_b
354 NOLESS >=
355 IDENTITY const_char_c
356 R_BRACK )
357 PRINTFSY printf
358 L_BRACK (
359 CONST_STRING "true_2 "
360 R_BRACK )
361 SEMICOLON ;
362 ELSESY else
363 PRINTFSY printf
364 L_BRACK (
365 CONST_STRING "false_2 "
366 R_BRACK )
367 SEMICOLON ;
368 IFSY if
369 L_BRACK (
370 IDENTITY const_int_1
371 EQUAL ==
372 CONST_INT 100
373 R_BRACK )
374 IFSY if
375 L_BRACK (
376 IDENTITY const_int_2
377 EQUAL ==
378 CONST_INT 300
379 R_BRACK )
380 PRINTFSY printf
381 L_BRACK (
382 CONST_STRING "a1 "
383 R_BRACK )
384 SEMICOLON ;
385 ELSESY else
386 PRINTFSY printf
387 L_BRACK (
388 CONST_STRING "a2 "
389 R_BRACK )
390 SEMICOLON ;
391 ELSESY else
392 PRINTFSY printf
393 L_BRACK (
394 CONST_STRING "false_3 "
395 R_BRACK )
396 SEMICOLON ;
397 WHILESY while
398 L_BRACK (
399 IDENTITY in_2
400 L_SQUARE [
401 CONST_INT 1
402 R_SQUARE ]
403 SMALLER <
404 CONST_INT 10
405 R_BRACK )
406 L_CURLY {
407 IDENTITY in_2
408 L_SQUARE [
409 CONST_INT 1
410 R_SQUARE ]
411 ASSIGN =
412 IDENTITY in_2
413 L_SQUARE [
414 CONST_INT 1
415 R_SQUARE ]
416 PLUS +
417 CONST_INT 1
418 SEMICOLON ;
419 PRINTFSY printf
420 L_BRACK (
421 CONST_STRING "* "
422 R_BRACK )
423 SEMICOLON ;
424 R_CURLY }
425 IDENTITY in_2
426 L_SQUARE [
427 CONST_INT 2
428 R_SQUARE ]
429 ASSIGN =
430 IDENTITY foo1
431 L_BRACK (
432 CONST_INT 1
433 COMMA ,
434 CONST_INT 2
435 R_BRACK )
436 SEMICOLON ;
437 PRINTFSY printf
438 L_BRACK (
439 IDENTITY in_2
440 L_SQUARE [
441 CONST_INT 2
442 R_SQUARE ]
443 R_BRACK )
444 SEMICOLON ;
445 PRINTFSY printf
446 L_BRACK (
447 CONST_STRING " "
448 R_BRACK )
449 SEMICOLON ;
450 IDENTITY in_2
451 L_SQUARE [
452 CONST_INT 3
453 R_SQUARE ]
454 ASSIGN =
455 IDENTITY foo2
456 SEMICOLON ;
457 PRINTFSY printf
458 L_BRACK (
459 IDENTITY in_2
460 L_SQUARE [
461 CONST_INT 3
462 R_SQUARE ]
463 R_BRACK )
464 SEMICOLON ;
465 PRINTFSY printf
466 L_BRACK (
467 CONST_STRING " "
468 R_BRACK )
469 SEMICOLON ;
470 IDENTITY in_b
471 L_SQUARE [
472 CONST_INT 2
473 R_SQUARE ]
474 ASSIGN =
475 IDENTITY foo3
476 L_BRACK (
477 CONST_CHAR a
478 R_BRACK )
479 SEMICOLON ;
480 PRINTFSY printf
481 L_BRACK (
482 IDENTITY in_b
483 L_SQUARE [
484 CONST_INT 2
485 R_SQUARE ]
486 R_BRACK )
487 SEMICOLON ;
488 PRINTFSY printf
489 L_BRACK (
490 CONST_STRING " "
491 R_BRACK )
492 SEMICOLON ;
493 IDENTITY in_b
494 L_SQUARE [
495 CONST_INT 3
496 R_SQUARE ]
497 ASSIGN =
498 IDENTITY foo4
499 SEMICOLON ;
500 PRINTFSY printf
501 L_BRACK (
502 IDENTITY in_b
503 L_SQUARE [
504 CONST_INT 3
505 R_SQUARE ]
506 R_BRACK )
507 SEMICOLON ;
508 PRINTFSY printf
509 L_BRACK (
510 CONST_STRING " "
511 R_BRACK )
512 SEMICOLON ;
513 IDENTITY foo5
514 SEMICOLON ;
515 IDENTITY in_3
516 ASSIGN =
517 IDENTITY foo6
518 L_BRACK (
519 CONST_INT 4
520 R_BRACK )
521 SEMICOLON ;
522 PRINTFSY printf
523 L_BRACK (
524 IDENTITY in_3
525 R_BRACK )
526 SEMICOLON ;
527 PRINTFSY printf
528 L_BRACK (
529 CONST_STRING " "
530 R_BRACK )
531 SEMICOLON ;
532 SCANFSY scanf
533 L_BRACK (
534 IDENTITY in_1
535 R_BRACK )
536 SEMICOLON ;
537 PRINTFSY printf
538 L_BRACK (
539 IDENTITY in_1
540 R_BRACK )
541 SEMICOLON ;
542 PRINTFSY printf
543 L_BRACK (
544 CONST_STRING " "
545 R_BRACK )
546 SEMICOLON ;
547 SCANFSY scanf
548 L_BRACK (
549 IDENTITY in_a
550 R_BRACK )
551 SEMICOLON ;
552 PRINTFSY printf
553 L_BRACK (
554 IDENTITY in_a
555 R_BRACK )
556 SEMICOLON ;
557 PRINTFSY printf
558 L_BRACK (
559 CONST_STRING " "
560 R_BRACK )
561 SEMICOLON ;
562 PRINTFSY printf
563 L_BRACK (
564 CONST_STRING "aaaaa "
565 R_BRACK )
566 SEMICOLON ;
567 PRINTFSY printf
568 L_BRACK (
569 CONST_STRING "bbbbb "
570 COMMA ,
571 IDENTITY in_1
572 R_BRACK )
573 SEMICOLON ;
574 PRINTFSY printf
575 L_BRACK (
576 CONST_STRING " "
577 R_BRACK )
578 SEMICOLON ;
579 IDENTITY switch_num
580 ASSIGN =
581 CONST_INT 10
582 SEMICOLON ;
583 SWITCHSY switch
584 L_BRACK (
585 IDENTITY switch_num
586 R_BRACK )
587 L_CURLY {
588 CASESY case
589 CONST_INT 2
590 COLON :
591 PRINTFSY printf
592 L_BRACK (
593 CONST_STRING "case_int_1 "
594 R_BRACK )
595 SEMICOLON ;
596 CASESY case
597 CONST_INT 5
598 COLON :
599 PRINTFSY printf
600 L_BRACK (
601 CONST_STRING "case_int_2 "
602 R_BRACK )
603 SEMICOLON ;
604 CASESY case
605 CONST_INT 10
606 COLON :
607 PRINTFSY printf
608 L_BRACK (
609 CONST_STRING "case_int_3 "
610 R_BRACK )
611 SEMICOLON ;
612 R_CURLY }
613 IDENTITY switch_num
614 ASSIGN =
615 CONST_INT 20
616 SEMICOLON ;
617 SWITCHSY switch
618 L_BRACK (
619 IDENTITY switch_num
620 R_BRACK )
621 L_CURLY {
622 CASESY case
623 CONST_INT 2
624 COLON :
625 PRINTFSY printf
626 L_BRACK (
627 CONST_STRING "case_int_4 "
628 R_BRACK )
629 SEMICOLON ;
630 CASESY case
631 CONST_INT 5
632 COLON :
633 PRINTFSY printf
634 L_BRACK (
635 CONST_STRING "case_int_5 "
636 R_BRACK )
637 SEMICOLON ;
638 CASESY case
639 CONST_INT 10
640 COLON :
641 PRINTFSY printf
642 L_BRACK (
643 CONST_STRING "case_int_6 "
644 R_BRACK )
645 SEMICOLON ;
646 DEFAULTSY default
647 COLON :
648 PRINTFSY printf
649 L_BRACK (
650 CONST_STRING "case_int_default "
651 R_BRACK )
652 SEMICOLON ;
653 R_CURLY }
654 IDENTITY swictch_chr
655 ASSIGN =
656 CONST_CHAR a
657 SEMICOLON ;
658 SWITCHSY switch
659 L_BRACK (
660 IDENTITY swictch_chr
661 R_BRACK )
662 L_CURLY {
663 CASESY case
664 CONST_CHAR a
665 COLON :
666 PRINTFSY printf
667 L_BRACK (
668 CONST_STRING "case_char_1 "
669 R_BRACK )
670 SEMICOLON ;
671 CASESY case
672 CONST_CHAR b
673 COLON :
674 PRINTFSY printf
675 L_BRACK (
676 CONST_STRING "case_char_2 "
677 R_BRACK )
678 SEMICOLON ;
679 CASESY case
680 CONST_CHAR c
681 COLON :
682 PRINTFSY printf
683 L_BRACK (
684 CONST_STRING "case_char_3 "
685 R_BRACK )
686 SEMICOLON ;
687 DEFAULTSY default
688 COLON :
689 PRINTFSY printf
690 L_BRACK (
691 CONST_STRING "case_char_default "
692 R_BRACK )
693 SEMICOLON ;
694 R_CURLY }
695 R_CURLY }

Finished!
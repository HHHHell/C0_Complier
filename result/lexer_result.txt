1 CONSTSY const
2 INTSY int
3 IDENTITY maxs
4 ASSIGN =
5 CONST_INT 2000
6 SEMICOLON ;
7 CONSTSY const
8 CHARSY char
9 IDENTITY xpstrt
10 ASSIGN =
11 CONST_CHAR a
12 SEMICOLON ;
13 INTSY int
14 IDENTITY begin
15 COMMA ,
16 IDENTITY end
17 COMMA ,
18 IDENTITY res
19 COMMA ,
20 IDENTITY ps
21 SEMICOLON ;
22 CHARSY char
23 IDENTITY _s
24 L_SQUARE [
25 CONST_INT 300
26 R_SQUARE ]
27 COMMA ,
28 IDENTITY temp
29 SEMICOLON ;
30 CHARSY char
31 IDENTITY ca
32 COMMA ,
33 IDENTITY cb
34 SEMICOLON ;
35 INTSY int
36 IDENTITY _asfunc_1
37 L_BRACK (
38 INTSY int
39 IDENTITY a
40 COMMA ,
41 CHARSY char
42 IDENTITY c
43 R_BRACK )
44 L_CURLY {
45 INTSY int
46 IDENTITY aa
47 SEMICOLON ;
48 INTSY int
49 IDENTITY bb
50 SEMICOLON ;
51 CHARSY char
52 IDENTITY cc
53 SEMICOLON ;
54 IDENTITY aa
55 ASSIGN =
56 IDENTITY a
57 SEMICOLON ;
58 IDENTITY cc
59 ASSIGN =
60 IDENTITY c
61 SEMICOLON ;
62 IDENTITY bb
63 ASSIGN =
64 CONST_INT 1
65 SEMICOLON ;
66 IFSY if
67 L_BRACK (
68 IDENTITY aa
69 GREATER >
70 IDENTITY bb
71 R_BRACK )
72 L_CURLY {
73 SWITCHSY switch
74 L_BRACK (
75 IDENTITY cc
76 MINUS -
77 CONST_CHAR i
78 R_BRACK )
79 L_CURLY {
80 CASESY case
81 CONST_INT 0
82 COLON :
83 RETURNSY return
84 L_BRACK (
85 IDENTITY a
86 MULTI *
87 IDENTITY _asfunc_1
88 L_BRACK (
89 IDENTITY aa
90 MINUS -
91 IDENTITY bb
92 COMMA ,
93 CONST_CHAR i
94 R_BRACK )
95 R_BRACK )
96 SEMICOLON ;
97 DEFAULTSY default
98 COLON :
99 L_CURLY {
100 RETURNSY return
101 L_BRACK (
102 IDENTITY a
103 MULTI *
104 IDENTITY _asfunc_1
105 L_BRACK (
106 IDENTITY aa
107 MINUS -
108 CONST_INT 1
109 COMMA ,
110 CONST_CHAR c
111 R_BRACK )
112 R_BRACK )
113 SEMICOLON ;
114 R_CURLY }
115 R_CURLY }
116 R_CURLY }
117 ELSESY else
118 L_CURLY {
119 SWITCHSY switch
120 L_BRACK (
121 IDENTITY cc
122 R_BRACK )
123 L_CURLY {
124 CASESY case
125 CONST_CHAR i
126 COLON :
127 PRINTFSY printf
128 L_BRACK (
129 CONST_STRING "The result of case i is done!"
130 R_BRACK )
131 SEMICOLON ;
132 DEFAULTSY default
133 COLON :
134 PRINTFSY printf
135 L_BRACK (
136 CONST_STRING "The result of case c is done!"
137 R_BRACK )
138 SEMICOLON ;
139 R_CURLY }
140 RETURNSY return
141 L_BRACK (
142 CONST_INT 1
143 R_BRACK )
144 SEMICOLON ;
145 R_CURLY }
146 R_CURLY }
147 INTSY int
148 IDENTITY min
149 L_BRACK (
150 INTSY int
151 IDENTITY a
152 COMMA ,
153 INTSY int
154 IDENTITY b
155 R_BRACK )
156 L_CURLY {
157 IFSY if
158 L_BRACK (
159 IDENTITY a
160 SMALLER <
161 IDENTITY b
162 R_BRACK )
163 L_CURLY {
164 RETURNSY return
165 L_BRACK (
166 IDENTITY a
167 R_BRACK )
168 SEMICOLON ;
169 R_CURLY }
170 ELSESY else
171 L_CURLY {
172 IFSY if
173 L_BRACK (
174 IDENTITY a
175 EQUAL ==
176 IDENTITY b
177 R_BRACK )
178 L_CURLY {
179 RETURNSY return
180 L_BRACK (
181 IDENTITY a
182 R_BRACK )
183 SEMICOLON ;
184 R_CURLY }
185 ELSESY else
186 L_CURLY {
187 RETURNSY return
188 L_BRACK (
189 IDENTITY b
190 R_BRACK )
191 SEMICOLON ;
192 R_CURLY }
193 R_CURLY }
194 R_CURLY }
195 INTSY int
196 IDENTITY max
197 L_BRACK (
198 INTSY int
199 IDENTITY a
200 COMMA ,
201 INTSY int
202 IDENTITY b
203 R_BRACK )
204 L_CURLY {
205 IFSY if
206 L_BRACK (
207 IDENTITY a
208 GREATER >
209 IDENTITY b
210 R_BRACK )
211 L_CURLY {
212 RETURNSY return
213 L_BRACK (
214 IDENTITY a
215 R_BRACK )
216 SEMICOLON ;
217 R_CURLY }
218 ELSESY else
219 L_CURLY {
220 RETURNSY return
221 L_BRACK (
222 IDENTITY b
223 R_BRACK )
224 SEMICOLON ;
225 R_CURLY }
226 R_CURLY }
227 VOIDSY void
228 IDENTITY no_sfc
229 L_BRACK (
230 INTSY int
231 IDENTITY a
232 COMMA ,
233 INTSY int
234 IDENTITY b
235 R_BRACK )
236 L_CURLY {
237 INTSY int
238 IDENTITY aa
239 COMMA ,
240 IDENTITY bb
241 SEMICOLON ;
242 IDENTITY aa
243 ASSIGN =
244 IDENTITY a
245 SEMICOLON ;
246 IDENTITY bb
247 ASSIGN =
248 IDENTITY b
249 SEMICOLON ;
250 IFSY if
251 L_BRACK (
252 IDENTITY aa
253 GREATER >
254 IDENTITY maxs
255 R_BRACK )
256 L_CURLY {
257 IDENTITY res
258 ASSIGN =
259 MINUS -
260 CONST_INT 1
261 SEMICOLON ;
262 RETURNSY return
263 SEMICOLON ;
264 R_CURLY }
265 ELSESY else
266 L_CURLY {
267 SEMICOLON ;
268 R_CURLY }
269 IDENTITY begin
270 ASSIGN =
271 IDENTITY min
272 L_BRACK (
273 IDENTITY aa
274 COMMA ,
275 IDENTITY bb
276 R_BRACK )
277 SEMICOLON ;
278 IDENTITY end
279 ASSIGN =
280 IDENTITY max
281 L_BRACK (
282 IDENTITY aa
283 COMMA ,
284 IDENTITY bb
285 R_BRACK )
286 SEMICOLON ;
287 IDENTITY res
288 ASSIGN =
289 L_BRACK (
290 IDENTITY begin
291 PLUS +
292 IDENTITY end
293 R_BRACK )
294 MULTI *
295 L_BRACK (
296 IDENTITY end
297 MINUS -
298 IDENTITY begin
299 PLUS +
300 CONST_INT 1
301 R_BRACK )
302 DIVIDE /
303 CONST_INT 2
304 SEMICOLON ;
305 R_CURLY }
306 VOIDSY void
307 IDENTITY print1
308 L_BRACK (
309 INTSY int
310 IDENTITY res1
311 COMMA ,
312 INTSY int
313 IDENTITY res2
314 R_BRACK )
315 L_CURLY {
316 PRINTFSY printf
317 L_BRACK (
318 CONST_STRING "result one is:"
319 R_BRACK )
320 SEMICOLON ;
321 PRINTFSY printf
322 L_BRACK (
323 IDENTITY res1
324 R_BRACK )
325 SEMICOLON ;
326 PRINTFSY printf
327 L_BRACK (
328 CONST_STRING "result two is:"
329 COMMA ,
330 PLUS +
331 IDENTITY res2
332 PLUS +
333 CONST_INT 2
334 MINUS -
335 CONST_INT 1
336 MINUS -
337 CONST_INT 1
338 R_BRACK )
339 SEMICOLON ;
340 R_CURLY }
341 VOIDSY void
342 IDENTITY print2
343 L_CURLY {
344 IFSY if
345 L_BRACK (
346 IDENTITY res
347 NOTEQUAL !=
348 MINUS -
349 CONST_INT 1
350 R_BRACK )
351 L_CURLY {
352 PRINTFSY printf
353 L_BRACK (
354 CONST_STRING "The sum of numbers between two results is:"
355 COMMA ,
356 IDENTITY res
357 R_BRACK )
358 SEMICOLON ;
359 R_CURLY }
360 ELSESY else
361 L_CURLY {
362 PRINTFSY printf
363 L_BRACK (
364 CONST_STRING "no result!"
365 R_BRACK )
366 SEMICOLON ;
367 R_CURLY }
368 R_CURLY }
369 VOIDSY void
370 IDENTITY main
371 L_BRACK (
372 R_BRACK )
373 L_CURLY {
374 CONSTSY const
375 INTSY int
376 IDENTITY first
377 ASSIGN =
378 CONST_INT 1
379 COMMA ,
380 IDENTITY second
381 ASSIGN =
382 CONST_INT 2
383 SEMICOLON ;
384 CONSTSY const
385 CHARSY char
386 IDENTITY p1
387 ASSIGN =
388 CONST_CHAR +
389 COMMA ,
390 IDENTITY p2
391 ASSIGN =
392 CONST_CHAR -
393 COMMA ,
394 IDENTITY p3
395 ASSIGN =
396 CONST_CHAR *
397 COMMA ,
398 IDENTITY p4
399 ASSIGN =
400 CONST_CHAR /
401 SEMICOLON ;
402 INTSY int
403 IDENTITY s_firi
404 COMMA ,
405 IDENTITY s_seci
406 COMMA ,
407 IDENTITY ni
408 COMMA ,
409 IDENTITY nc
410 COMMA ,
411 IDENTITY resulti
412 COMMA ,
413 IDENTITY resultc
414 COMMA ,
415 IDENTITY i
416 COMMA ,
417 IDENTITY j
418 COMMA ,
419 IDENTITY k
420 COMMA ,
421 IDENTITY flag
422 SEMICOLON ;
423 CHARSY char
424 IDENTITY s_firc
425 COMMA ,
426 IDENTITY s_secc
427 COMMA ,
428 IDENTITY p_fir
429 COMMA ,
430 IDENTITY p_sec
431 SEMICOLON ;
432 SCANFSY scanf
433 L_BRACK (
434 IDENTITY s_firi
435 COMMA ,
436 IDENTITY s_seci
437 COMMA ,
438 IDENTITY s_firc
439 COMMA ,
440 IDENTITY s_secc
441 R_BRACK )
442 SEMICOLON ;
443 IFSY if
444 L_BRACK (
445 IDENTITY s_firi
446 SMALLER <
447 CONST_INT 0
448 R_BRACK )
449 L_CURLY {
450 PRINTFSY printf
451 L_BRACK (
452 CONST_STRING "wrong input!"
453 R_BRACK )
454 SEMICOLON ;
455 RETURNSY return
456 SEMICOLON ;
457 R_CURLY }
458 ELSESY else
459 L_CURLY {
460 IFSY if
461 L_BRACK (
462 IDENTITY s_seci
463 SMALLER <
464 CONST_INT 0
465 R_BRACK )
466 L_CURLY {
467 PRINTFSY printf
468 L_BRACK (
469 CONST_STRING "wrong input!"
470 R_BRACK )
471 SEMICOLON ;
472 RETURNSY return
473 SEMICOLON ;
474 R_CURLY }
475 ELSESY else
476 L_CURLY {
477 SEMICOLON ;
478 R_CURLY }
479 R_CURLY }
480 IFSY if
481 L_BRACK (
482 IDENTITY s_firi
483 NOLESS >=
484 IDENTITY s_seci
485 R_BRACK )
486 L_CURLY {
487 IDENTITY ni
488 ASSIGN =
489 IDENTITY s_firi
490 SEMICOLON ;
491 R_CURLY }
492 ELSESY else
493 L_CURLY {
494 IDENTITY ni
495 ASSIGN =
496 IDENTITY s_seci
497 SEMICOLON ;
498 R_CURLY }
499 IFSY if
500 L_BRACK (
501 IDENTITY ni
502 NOBIGGER <=
503 CONST_INT 0
504 R_BRACK )
505 L_CURLY {
506 WHILESY while
507 L_BRACK (
508 IDENTITY ni
509 NOBIGGER <=
510 PLUS +
511 CONST_INT 0
512 R_BRACK )
513 L_CURLY {
514 IDENTITY ni
515 ASSIGN =
516 IDENTITY ni
517 PLUS +
518 CONST_INT 1
519 SEMICOLON ;
520 R_CURLY }
521 R_CURLY }
522 ELSESY else
523 L_CURLY {
524 IDENTITY ni
525 ASSIGN =
526 IDENTITY ni
527 PLUS +
528 CONST_INT 1
529 SEMICOLON ;
530 R_CURLY }
531 SWITCHSY switch
532 L_BRACK (
533 PLUS +
534 IDENTITY s_firc
535 MINUS -
536 IDENTITY s_secc
537 R_BRACK )
538 L_CURLY {
539 CASESY case
540 CONST_INT 1
541 COLON :
542 IDENTITY nc
543 ASSIGN =
544 CONST_INT 1
545 SEMICOLON ;
546 CASESY case
547 CONST_INT 2
548 COLON :
549 IDENTITY nc
550 ASSIGN =
551 CONST_INT 2
552 SEMICOLON ;
553 CASESY case
554 MINUS -
555 CONST_INT 1
556 COLON :
557 IDENTITY nc
558 ASSIGN =
559 CONST_INT 3
560 SEMICOLON ;
561 CASESY case
562 MINUS -
563 CONST_INT 2
564 COLON :
565 IDENTITY nc
566 ASSIGN =
567 CONST_INT 4
568 SEMICOLON ;
569 DEFAULTSY default
570 COLON :
571 IDENTITY nc
572 ASSIGN =
573 CONST_INT 5
574 SEMICOLON ;
575 R_CURLY }
576 IDENTITY resulti
577 ASSIGN =
578 IDENTITY _asfunc_1
579 L_BRACK (
580 IDENTITY ni
581 COMMA ,
582 CONST_CHAR i
583 R_BRACK )
584 SEMICOLON ;
585 IDENTITY resultc
586 ASSIGN =
587 IDENTITY _asfunc_1
588 L_BRACK (
589 IDENTITY nc
590 COMMA ,
591 CONST_CHAR c
592 R_BRACK )
593 SEMICOLON ;
594 IDENTITY print1
595 L_BRACK (
596 IDENTITY resulti
597 COMMA ,
598 IDENTITY resultc
599 R_BRACK )
600 SEMICOLON ;
601 IDENTITY no_sfc
602 L_BRACK (
603 IDENTITY resulti
604 COMMA ,
605 IDENTITY resultc
606 R_BRACK )
607 SEMICOLON ;
608 IDENTITY print2
609 SEMICOLON ;
610 RETURNSY return
611 SEMICOLON ;
612 R_CURLY }

Finished!